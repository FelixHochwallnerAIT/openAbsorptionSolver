// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 location "system";
 object controlDict;
}

application heatMassTransferPimpleFoam;

startFrom latestTime;

startTime 0;

stopAt endTime;

endTime 2.0;

deltaT 1e-05;

adjustTimeStep no;
maxCo 0.6;

writeControl adjustableRunTime;

writeInterval 0.1;

purgeWrite 0;

writeFormat ascii;

writePrecision 6;

writeCompression no;
timeFormat general;

timePrecision 6;

runTimeModifiable yes;
libs
  (
    "customBoundaryConditions.so"
  );

functions
{
  residuals_air
  {
    type residuals;
    libs
      (
        "libutilityFunctionObjects.so"
      );
    region air;
    fields
      (
        T
        cw
      );
  }
  residuals_flow_air
  {
    type residuals;
    libs
      (
        "libutilityFunctionObjects.so"
      );
    region air;
    fields
      (
        p
        U
      );
  }
  residuals_solution1
  {
    type residuals;
    libs
      (
        "libutilityFunctionObjects.so"
      );
    region solution1;
    fields
      (
        T
        cw
      );
  }
  residuals_solution2
  {
    type residuals;
    libs
      (
        "libutilityFunctionObjects.so"
      );
    region solution2;
    fields
      (
        T
        cw
      );
  }
  absorbedMassFluxAir
  {
    type absorbedMassFlux;
    libs
      (
        "customFieldFunctionObjects.so"
      );
    region air;
    patches
      (
        air_to_solution1
        air_to_solution2
      );
    writePrecision 8;
    writeToFile yes;
    useUserTime yes;
    enabled yes;
    log yes;
    executeControl timeStep;
    writeControl timeStep;
  }
  absorbedMassFluxAirObject
  {
    type absorbedMassFluxObject;
    libs
      (
        "customFieldFunctionObjects.so"
      );
    region air;
    patches
      (
        air_to_solution1
        air_to_solution2
      );
    writePrecision 8;
    writeToFile yes;
    useUserTime yes;
    enabled yes;
    log yes;
    executeControl writeTime;
    writeControl writeTime;
  }
  sensibleHeatFluxAir
  {
    type sensibleHeatFlux;
    libs
      (
        "customFieldFunctionObjects.so"
      );
    region air;
    patches
      (
        air_to_solution1
        air_to_solution2
      );
    writePrecision 8;
    writeToFile yes;
    useUserTime yes;
    enabled yes;
    log yes;
    executeControl timeStep;
    writeControl timeStep;
  }
  sensibleHeatFluxDensityAirObject
  {
    type sensibleHeatFluxDensityObject;
    libs
      (
        "customFieldFunctionObjects.so"
      );
    region air;
    patches
      (
        air_to_solution1
        air_to_solution2
      );
    writePrecision 8;
    writeToFile yes;
    useUserTime yes;
    enabled yes;
    log yes;
    executeControl writeTime;
    writeControl writeTime;
  }
  outletTemperature
  {
    type surfaceFieldValue;
    libs
      (
        "libfieldFunctionObjects.so"
      );
    region air;
    name outlet;
    fields
      (
        T
      );
    operation weightedAverage;
    weightField phi;
    regionType patch;
    writeControl timeStep;
    writeInterval 1;
    writeFields no;
    log no;
  }
  staticPressureDifference
  {
    type fieldValueDelta;
    libs
      (
        "libfieldFunctionObjects.so"
      );
    region air;
    operation subtract;
    writeControl timeStep;
    writeInterval 1;
    log no;
    patch1 inlet;
    patch2 outlet;
    region1
    {
      type surfaceFieldValue;
      libs
        (
          "libfieldFunctionObjects.so"
        );
      writeControl timeStep;
      writeInterval 1;
      writeFields no;
      log no;
      regionType patch;
      name $patch1;
      operation weightedAverage;
      fields
        (
          p
        );
      weightField phi;
    }
    region2
    {
      type surfaceFieldValue;
      libs
        (
          "libfieldFunctionObjects.so"
        );
      writeControl timeStep;
      writeInterval 1;
      writeFields no;
      log no;
      regionType patch;
      name $patch2;
      operation weightedAverage;
      fields
        (
          p
        );
      weightField phi;
    }
    executeControl writeTime;
  }
  totalPressure
  {
    type pressure;
    libs
      (
        "libfieldFunctionObjects.so"
      );
    region air;
    executeControl writeTime;
    writeControl writeTime;
    log no;
    pRef 0;
    rhoInf 1.2486254378144424;
    calcTotal yes;
    calcCoeff no;
    rho rhoInf;
  }
  totalPressureDifference
  {
    type fieldValueDelta;
    libs
      (
        "libfieldFunctionObjects.so"
      );
    region air;
    operation subtract;
    writeControl writeTime;
    executeControl writeTime;
    log yes;
    patch1 inlet;
    patch2 outlet;
    region1
    {
      type surfaceFieldValue;
      libs
        (
          "libfieldFunctionObjects.so"
        );
      writeControl timeStep;
      writeInterval 1;
      writeFields no;
      log no;
      regionType patch;
      name $patch1;
      operation weightedAverage;
      fields
        (
          total(p)
        );
      weightField phi;
    }
    region2
    {
      type surfaceFieldValue;
      libs
        (
          "libfieldFunctionObjects.so"
        );
      writeControl timeStep;
      writeInterval 1;
      writeFields no;
      log no;
      regionType patch;
      name $patch2;
      operation weightedAverage;
      fields
        (
          total(p)
        );
      weightField phi;
    }
  }
} 	// ************************************************************************* //

